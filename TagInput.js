// Generated by CoffeeScript 1.12.7
(function() {
  var Button, CROSS, TagInput, TextInput, m, s, u,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  m = require('mithril');

  s = require('mss-js');

  u = require('./utils');

  TextInput = require('./TextInput');

  Button = require('./Button');

  CROSS = require('./CONSTANT').CROSS;

  TagInput = (function() {
    function TagInput(arg) {
      var placeholder, ref, ref1, ref2, ref3, ref4, ref5;
      this.tagList = (ref = arg.tagList) != null ? ref : [], placeholder = (ref1 = arg.placeholder) != null ? ref1 : '', this.separators = (ref2 = arg.separators) != null ? ref2 : ' ,，', this.onAdd = (ref3 = arg.onAdd) != null ? ref3 : u.noOp, this.onDel = (ref4 = arg.onDel) != null ? ref4 : u.noOp, this.maxTagNum = (ref5 = arg.maxTagNum) != null ? ref5 : Number.MAX_SAFE_INTEGER;
      this.delTag = bind(this.delTag, this);
      this.addTag = bind(this.addTag, this);
      this.onKeyup = bind(this.onKeyup, this);
      this.tagInput = new TextInput({
        content: '',
        placeholder: placeholder,
        onEnter: this.addTag,
        onKeyup: this.onKeyup
      });
    }

    TagInput.prototype.onKeyup = function(c) {
      if (this.separators.indexOf(c) !== -1) {
        this.tagInput.content = this.tagInput.content.substring(0, this.tagInput.content.length - 1);
        return this.addTag();
      }
    };

    TagInput.prototype.addTag = function() {
      var tag;
      tag = this.tagInput.content;
      if ((this.tagList.indexOf(tag) === -1) && (tag !== '') && (this.tagList.length < this.maxTagNum)) {
        this.tagList.push(tag);
        this.onAdd(tag);
        return this.tagInput.content = '';
      }
    };

    TagInput.prototype.delTag = function(e) {
      var i, tag;
      tag = u.getTargetData(e, 'tag');
      i = this.tagList.indexOf(tag);
      if (i !== -1) {
        this.tagList.splice(i, 1);
        return this.onDel(i);
      }
    };

    TagInput.prototype.view = function() {
      var tag;
      return m('.TagInput', (function() {
        var j, len, ref, results;
        ref = this.tagList;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          tag = ref[j];
          results.push(m('.TagItem', m('span', tag), m('.DelBtn', {
            'data-tag': tag,
            onclick: this.delTag
          }, '✕')));
        }
        return results;
      }).call(this), this.tagList.length < this.maxTagNum ? m('.TagInputGroup', this.tagInput.view(), m('.AddBtn', {
        onclick: this.addTag
      }, m.trust(CROSS))) : void 0);
    };

    return TagInput;

  })();

  TagInput.mss = s.merge([
    TextInput.mss, {
      TagInput: {
        TagItem: {
          display: 'inline-block',
          border: '1px solid ' + {}.border,
          color: {}.text,
          padding: '4px 12px',
          margin: '0 4px 4px 0',
          verticalAlign: 'middle',
          DelBtn: {
            display: 'inline-block',
            marginLeft: '12px',
            color: {}.main,
            cursor: 'pointer',
            $hover: {
              color: {}.warn
            }
          }
        },
        TagInputGroup: {
          position: 'relative',
          display: 'inline-block',
          verticalAlign: 'middle',
          margin: '0 4px 4px 0',
          width: '100px',
          TextInput: {
            width: '100%'
          }
        },
        AddBtn: {
          position: 'absolute',
          right: '0.2em',
          top: '0.165em',
          cursor: 'pointer',
          svg: {
            fill: {}.main,
            width: '1.6em',
            height: '1.6em'
          }
        }
      }
    }
  ]);

  module.exports = TagInput;

}).call(this);
