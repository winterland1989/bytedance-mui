// Generated by CoffeeScript 1.12.7
(function() {
  var BUTTON_HEIGHT_MAP, BUTTON_WIDTH_MAP, FONTSIZE_MAP, INPUT_WIDTH_MAP, TextInput, m, ref, s, u,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  m = require('mithril');

  s = require('mss-js');

  u = require('./utils');

  ref = require('./CONSTANT'), INPUT_WIDTH_MAP = ref.INPUT_WIDTH_MAP, BUTTON_WIDTH_MAP = ref.BUTTON_WIDTH_MAP, BUTTON_HEIGHT_MAP = ref.BUTTON_HEIGHT_MAP, FONTSIZE_MAP = ref.FONTSIZE_MAP;

  TextInput = (function() {
    function TextInput(arg) {
      var ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
      this.value = (ref1 = arg.value) != null ? ref1 : '', this.disabled = (ref2 = arg.disabled) != null ? ref2 : false, this.error = (ref3 = arg.error) != null ? ref3 : false, this.password = (ref4 = arg.password) != null ? ref4 : false, this.placeholder = (ref5 = arg.placeholder) != null ? ref5 : '', this.prefix = (ref6 = arg.prefix) != null ? ref6 : '', this.suffix = (ref7 = arg.suffix) != null ? ref7 : '', this.unit = (ref8 = arg.unit) != null ? ref8 : '', this.size = (ref9 = arg.size) != null ? ref9 : 'M', this.width = (ref10 = arg.width) != null ? ref10 : INPUT_WIDTH_MAP[this.size], this.onPaste = (ref11 = arg.onPaste) != null ? ref11 : u.noOp, this.onChange = (ref12 = arg.onChange) != null ? ref12 : u.noOp, this.onKeyup = (ref13 = arg.onKeyup) != null ? ref13 : u.noOp, this.onEnter = (ref14 = arg.onEnter) != null ? ref14 : u.noOp, this.onClick = (ref15 = arg.onClick) != null ? ref15 : u.noOp;
      this.onKeyupInternal = bind(this.onKeyupInternal, this);
      this.onPasteInternal = bind(this.onPasteInternal, this);
      this.onChangeInternal = bind(this.onChangeInternal, this);
    }

    TextInput.prototype.onChangeInternal = function(e) {
      var c;
      c = e.target.value;
      this.value = c;
      return this.onChange(c, e);
    };

    TextInput.prototype.onPasteInternal = function(e) {
      var c;
      console.log(e);
      c = (event.clipboardData || window.clipboardData).getData('text');
      this.value = c;
      return this.onPaste(c, e);
    };

    TextInput.prototype.onKeyupInternal = function(e) {
      var c;
      c = e.target.value;
      this.value = c;
      if (e.keyCode === 13 || e.key === "Enter") {
        return this.onEnter(c, e);
      } else {
        return this.onKeyup(c, e);
      }
    };

    TextInput.prototype.view = function() {
      return [
        m('table.TextInput', {
          className: this.error ? 'Error' : '',
          style: {
            width: this.width,
            height: BUTTON_HEIGHT_MAP[this.size],
            lineHeight: BUTTON_HEIGHT_MAP[this.size],
            fontSize: FONTSIZE_MAP[this.size]
          }
        }, m('tr', this.prefix ? m('span.Prefix', this.prefix) : void 0, m('input.Input', {
          type: this.password ? 'password' : '',
          style: {
            height: BUTTON_HEIGHT_MAP[this.size],
            lineHeight: BUTTON_HEIGHT_MAP[this.size],
            fontSize: FONTSIZE_MAP[this.size]
          },
          disabled: this.disabled,
          onchange: this.onChangeInternal,
          onkeyup: this.onKeyupInternal,
          value: this.value,
          placeholder: this.placeholder,
          onclick: this.onClick,
          onpaste: this.onPasteInternal
        }), this.suffix ? m('span.Suffix', this.suffix) : void 0, m('span.Unit', this.unit)))
      ];
    };

    return TextInput;

  })();

  TextInput.mss = {
    TextInput: {
      borderCollapse: 'separate',
      borderSpacing: 0,
      borderRadius: '4px',
      border: '1px solid #DADFE3',
      position: 'relative',
      Unit: {
        position: 'absolute',
        top: 0,
        left: '100%',
        marginLeft: '16px'
      },
      Prefix_Suffix: {
        display: 'table-cell',
        background: '#F8F9FA',
        verticalAlign: 'middle',
        padding: '0 8px'
      },
      Prefix: {
        borderRight: '1px solid #DADFE3',
        borderRadius: '4px 0 0 4px'
      },
      Suffix: {
        borderLeft: '1px solid #DADFE3',
        borderRadius: '0 4px 4px 0'
      },
      Input: {
        width: '100%',
        verticalAlign: 'middle',
        margin: 0,
        display: 'table-cell',
        color: '#333',
        outline: 0,
        border: 'none',
        borderRadius: '4px',
        padding: '0 8px',
        verticalAlign: 'middle',
        $disabled: {
          background: '#FCFCFC',
          cursor: 'not-allowed',
          color: '#D6D6D6'
        }
      }
    },
    '.TextInput:hover': {
      borderColor: '#2F88FF'
    },
    '.TextInput.Error': {
      borderColor: '#F45858',
      Prefix: {
        borderColor: '#F45858'
      },
      Suffix: {
        borderColor: '#F45858'
      }
    },
    '.TextInput:focus-within': {
      borderColor: '#2F88FF',
      boxShadow: '0 0 0 2px #2F88FF26',
      Prefix: {
        borderColor: '#2F88FF'
      },
      Suffix: {
        borderColor: '#2F88FF'
      }
    }
  };

  module.exports = TextInput;

}).call(this);
