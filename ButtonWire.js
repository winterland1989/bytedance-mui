// Generated by CoffeeScript 1.12.7
(function() {
  var BUTTON_HEIGHT_MAP, BUTTON_WIDTH_MAP, Button, FONTSIZE_MAP, m, ref, s, style, u,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  m = require('mithril');

  s = require('mss-js');

  style = require('./style');

  u = require('./utils');

  ref = require('./CONSTANT'), BUTTON_WIDTH_MAP = ref.BUTTON_WIDTH_MAP, BUTTON_HEIGHT_MAP = ref.BUTTON_HEIGHT_MAP, FONTSIZE_MAP = ref.FONTSIZE_MAP;

  module.exports = Button = (function() {
    function Button(arg) {
      var ref1, ref2, ref3, ref4, ref5;
      this.label = arg.label, this.disabled = (ref1 = arg.disabled) != null ? ref1 : false, this.onClick = (ref2 = arg.onClick) != null ? ref2 : u.noOp, this.data = (ref3 = arg.data) != null ? ref3 : '', this.size = (ref4 = arg.size) != null ? ref4 : 'M', this.width = (ref5 = arg.width) != null ? ref5 : 'FIXED';
      this.onClickInternal = bind(this.onClickInternal, this);
    }

    Button.prototype.onClickInternal = function(e) {
      var data;
      if (!this.disabled) {
        data = u.getCurrentTargetData(e, 'data');
        return this.onClick(data);
      }
    };

    Button.prototype.view = function() {
      var self;
      self = this;
      return m("button.Button", {
        style: {
          padding: this.width === 'PADDING' ? '0 16px' : 0,
          width: this.width === 'PADDING' ? 'auto' : this.width === 'FIXED' ? BUTTON_WIDTH_MAP[this.size] : this.width,
          height: BUTTON_HEIGHT_MAP[this.size],
          lineHeight: BUTTON_HEIGHT_MAP[this.size],
          fontSize: FONTSIZE_MAP[this.size]
        },
        onclick: this.onClickInternal,
        'data-data': this.data,
        disabled: this.disabled
      }, this.label);
    };

    return Button;

  })();

  Button.mss = {
    Button: {
      position: 'relative',
      borderRadius: '4px',
      border: '1px solid #DADFE3',
      textAlign: 'center',
      color: '#333',
      background: '#FFF',
      cursor: 'pointer',
      $hover_$focus: {
        borderColor: '#2F88FF',
        color: '#2F88FF'
      },
      $disabled: {
        borderColor: '#EDF1F5',
        background: '#FCFCFC',
        cursor: 'not-allowed',
        color: '#D6D6D6'
      },
      $focus: {
        outline: 'none',
        background: '#F0F9FF'
      },
      $active: {
        borderColor: '#1C68D9',
        color: '#1C68D9'
      }
    }
  };

}).call(this);
