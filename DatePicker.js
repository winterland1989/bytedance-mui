// Generated by CoffeeScript 1.12.7
(function() {
  var AutoHide, CALENDAR, DAY_NAME, DatePicker, LEFT_ARROW, LEFT_DOUBLE_ARROW, RIGHT_ARROW, RIGHT_DOUBLE_ARROW, m, ref, s, u,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  m = require('mithril');

  s = require('mss-js');

  u = require('./utils');

  AutoHide = require('./AutoHide');

  ref = require('./CONSTANT'), DAY_NAME = ref.DAY_NAME, LEFT_DOUBLE_ARROW = ref.LEFT_DOUBLE_ARROW, LEFT_ARROW = ref.LEFT_ARROW, RIGHT_DOUBLE_ARROW = ref.RIGHT_DOUBLE_ARROW, RIGHT_ARROW = ref.RIGHT_ARROW, CALENDAR = ref.CALENDAR;

  DatePicker = (function() {
    function DatePicker(arg) {
      var date, highlightEndDate, highlightStartDate, ref1, ref2;
      date = arg.date, this.ifDateAvailable = (ref1 = arg.ifDateAvailable) != null ? ref1 : (function() {
        return true;
      }), this.onSelect = (ref2 = arg.onSelect) != null ? ref2 : u.noOp, highlightStartDate = arg.highlightStartDate, highlightEndDate = arg.highlightEndDate;
      this.selectDate = bind(this.selectDate, this);
      this.nextYear = bind(this.nextYear, this);
      this.preYear = bind(this.preYear, this);
      this.nextMonth = bind(this.nextMonth, this);
      this.preMonth = bind(this.preMonth, this);
      if (date) {
        this.date = u.clearDateHMS(new Date(date));
        this.internalDate = u.clearDateHMS(new Date(date));
      } else {
        this.date = null;
        this.internalDate = u.clearDateHMS(new Date);
      }
      if (highlightStartDate) {
        this.highlightStartDate = u.clearDateHMS(new Date(highlightStartDate));
      }
      if (highlightEndDate) {
        this.highlightEndDate = u.clearDateHMS(new Date(highlightEndDate));
      }
      this.calculateStartDate();
      this.autoHideDatePicker = new AutoHide({
        widget: {
          view: (function(_this) {
            return function() {
              var d, dObj, monthEnd, monthStart;
              return m('.DatePickerWidget', m('.NavBar', m('span.PreYear', {
                onclick: _this.preYear
              }, m.trust(LEFT_DOUBLE_ARROW)), m('span.PreMonth', {
                onclick: _this.preMonth
              }, m.trust(LEFT_ARROW)), m('span.CurrentMonth', _this.internalDate.getFullYear() + '年 ' + (_this.internalDate.getMonth() + 1) + '月'), m('span.NextMonth', {
                onclick: _this.nextMonth
              }, m.trust(RIGHT_ARROW)), m('span.NextYear', {
                onclick: _this.nextYear
              }, m.trust(RIGHT_DOUBLE_ARROW))), m('.DayBar', (function() {
                var j, len, results;
                results = [];
                for (j = 0, len = DAY_NAME.length; j < len; j++) {
                  d = DAY_NAME[j];
                  results.push(m('span.Day', d));
                }
                return results;
              })()), m('.DateList', {
                onclick: _this.selectDate
              }, (function() {
                var j, ref3, ref4, ref5, ref6, ref7, ref8, results;
                results = [];
                for (d = j = 0; j <= 41; d = ++j) {
                  dObj = new Date(this.startDate.getTime() + d * 24 * 3600 * 1000);
                  monthStart = new Date(this.internalDate);
                  monthStart.setDate(1);
                  monthEnd = new Date(this.internalDate);
                  monthEnd.setMonth(this.internalDate.getMonth() + 1);
                  monthEnd.setDate(0);
                  results.push(m('span.Date', {
                    className: [(dObj >= monthStart && dObj <= monthEnd) ? 'InMonth' : void 0, !this.ifDateAvailable(dObj) ? 'Unavailable' : '', (dObj.getTime() === ((ref3 = this.date) != null ? ref3.getTime() : void 0)) ? 'Current' : '', (((ref5 = this.highlightStartDate) != null ? ref5.getTime() : void 0) < (ref4 = dObj.getTime()) && ref4 < ((ref6 = this.highlightEndDate) != null ? ref6.getTime() : void 0)) ? 'Highlight' : '', ((ref7 = this.highlightStartDate) != null ? ref7.getTime() : void 0) === dObj.getTime() ? 'HighlightStart' : ((ref8 = this.highlightEndDate) != null ? ref8.getTime() : void 0) === dObj.getTime() ? 'HighlightEnd' : void 0].join(' '),
                    'data-year': dObj.getFullYear(),
                    'data-month': dObj.getMonth(),
                    'data-date': dObj.getDate()
                  }, dObj.getDate()));
                }
                return results;
              }).call(_this)));
            };
          })(this)
        }
      });
    }

    DatePicker.prototype.calculateStartDate = function() {
      var d, i, j, monthStart;
      monthStart = new Date(this.internalDate);
      monthStart.setDate(1);
      d = monthStart.getTime();
      for (i = j = 0; j <= 6; i = ++j) {
        this.startDate = new Date(d - i * 24 * 3600 * 1000);
        if (this.startDate.getDay() === 0) {
          return;
        }
      }
    };

    DatePicker.prototype.preMonth = function(e) {
      this.internalDate.setMonth(this.internalDate.getMonth() - 1);
      this.calculateStartDate();
      return u.cancelBubble(e);
    };

    DatePicker.prototype.nextMonth = function(e) {
      this.internalDate.setMonth(this.internalDate.getMonth() + 1);
      this.calculateStartDate();
      return u.cancelBubble(e);
    };

    DatePicker.prototype.preYear = function(e) {
      this.internalDate.setFullYear(this.internalDate.getFullYear() - 1);
      this.calculateStartDate();
      return u.cancelBubble(e);
    };

    DatePicker.prototype.nextYear = function(e) {
      this.internalDate.setFullYear(this.internalDate.getFullYear() + 1);
      this.calculateStartDate();
      return u.cancelBubble(e);
    };

    DatePicker.prototype.selectDate = function(e) {
      if (!u.targetHasClass(u.getTarget(e), 'Unavailable')) {
        if (u.getTargetData(e, 'year')) {
          if (this.date == null) {
            this.date = u.clearDateHMS(new Date);
          }
          this.date.setFullYear(u.getTargetData(e, 'year'));
          this.date.setMonth(u.getTargetData(e, 'month'));
          this.date.setDate(u.getTargetData(e, 'date'));
          return this.onSelect(this.date, e);
        }
      }
    };

    DatePicker.prototype.view = function() {
      return m('.DatePicker', {
        className: this.autoHideDatePicker.showing ? 'Expanded' : ''
      }, m('.DateLabel', {
        onclick: this.autoHideDatePicker.show,
        className: !this.date ? 'Note' : ''
      }, this.date ? u.formatDate(this.date) : '请选择日期'), m('.DateIcon', m.trust(CALENDAR)), this.autoHideDatePicker.view());
    };

    return DatePicker;

  })();

  DatePicker.mss = {
    DatePicker: {
      position: 'relative',
      width: '240px',
      fontSize: '14px',
      color: '#333',
      DateLabel: {
        boxSizing: 'border-box',
        height: '34px',
        lineHeight: '32px',
        paddingLeft: '12px',
        border: '1px solid #DADFE3',
        borderRadius: '4px',
        cursor: 'pointer',
        $hover: {
          borderColor: '#2F88FF'
        }
      },
      Note: {
        color: '#D6D6D6'
      },
      DateIcon: {
        position: 'absolute',
        top: '5px',
        right: '12px',
        svg: {
          width: '14px',
          fill: '#999'
        }
      },
      DatePickerWidget: {
        position: 'absolute',
        userSelect: 'none',
        width: '288px',
        height: '280px',
        top: '38px',
        left: 0,
        background: '#FFF',
        boxShadow: '0px 2px 6px 0px #00000014',
        borderRadius: '4px',
        zIndex: 1,
        NavBar: {
          textAlign: 'center',
          lineHeight: '38px',
          height: '38px',
          background: '#F8F9FA',
          borderRadius: '3px 3px 0 0',
          position: 'relative',
          PreYear_PreMonth_NextMonth_NextYear: {
            position: 'absolute',
            top: '6px',
            width: '16px',
            svg: {
              width: '16px',
              stroke: '#999'
            },
            cursor: 'pointer',
            $hover: {
              svg: {
                stroke: '#2F88FF'
              }
            }
          },
          PreYear: {
            left: '12px'
          },
          PreMonth: {
            left: '40px'
          },
          NextYear: {
            right: '12px'
          },
          NextMonth: {
            right: '40px'
          },
          CurrentMonth: {
            display: 'inline-block',
            fontWeight: '600'
          }
        },
        DayBar: {
          padding: '16px 16px 0',
          Day: {
            display: 'inline-block',
            width: '24px',
            height: '24px',
            lineHeight: '22px',
            textAlign: 'center',
            fontSize: '14px',
            margin: '3px 6px'
          }
        },
        DateList: {
          padding: '0px 16px 18px',
          Date: {
            boxSizing: 'border-box',
            display: 'inline-block',
            verticalAlign: 'middle',
            width: '24px',
            height: '24px',
            lineHeight: '22px',
            textAlign: 'center',
            fontSize: '14px',
            margin: '3px 6px',
            borderRadius: '4px',
            cursor: 'pointer',
            color: '#D6D6D6'
          },
          InMonth: {
            color: '#333'
          },
          Current: {
            boxSizing: 'border-box',
            color: '#2F88FF',
            border: '1px solid #2F88FF',
            position: 'relative',
            zIndex: 1
          },
          Unavailable: {
            color: '#D6D6D6',
            cursor: 'not-allowed'
          },
          Highlight: {
            width: '48px',
            height: '22px',
            margin: '4px -6px',
            background: '#EDF1F5',
            borderRadius: 0
          },
          'Highlight.Current': {
            border: 'none'
          },
          HighlightStart_HighlightEnd: {
            position: 'relative',
            background: '#2F88FF',
            color: '#FFF'
          },
          HighlightStart: {
            $after: {
              content: '""',
              position: 'absolute',
              width: '12px',
              height: '22px',
              background: '#EDF1F5',
              top: '0.5px',
              right: '-12px'
            }
          },
          HighlightEnd: {
            $after: {
              content: '""',
              position: 'absolute',
              width: '12px',
              height: '22px',
              background: '#EDF1F5',
              top: '0.5px',
              left: '-12px'
            }
          }
        }
      }
    },
    Expanded: {
      DateLabel: {
        borderColor: '#2F88FF',
        boxShadow: '0 0 0 2px #2F88FF26'
      }
    }
  };

  module.exports = DatePicker;

}).call(this);
