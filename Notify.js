// Generated by CoffeeScript 1.12.7
(function() {
  var Notify, contentArray, dataArray, iconArray, keyCounter, m, s, timerArray, u,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  m = require('mithril');

  s = require('mss-js');

  u = require('./utils');

  contentArray = [];

  iconArray = [];

  dataArray = [];

  timerArray = [];

  keyCounter = 0;

  Notify = (function() {
    function Notify(arg) {
      var ref, ref1;
      this.duration = (ref = arg.duration) != null ? ref : 3000, this.onClick = (ref1 = arg.onClick) != null ? ref1 : u.noOp;
      this.hideInternal = bind(this.hideInternal, this);
      this.show = bind(this.show, this);
      this.onClickInternal = bind(this.onClickInternal, this);
      this.indexArray = [];
    }

    Notify.prototype.onClickInternal = function(e) {
      var data, index;
      index = parseInt(u.getCurrentTargetData(e, 'index'));
      data = JSON.parse(u.getCurrentTargetData(e, 'data'));
      this.hideInternal(index);
      return this.onClick(data);
    };

    Notify.prototype.show = function(icon, content, data) {
      if (data == null) {
        data = null;
      }
      contentArray.push({
        content: content,
        context: this,
        key: keyCounter++
      });
      iconArray.push(icon);
      dataArray.push(data);
      return timerArray.push(setTimeout((function(_this) {
        return function() {
          return _this.hideInternal(0);
        };
      })(this), this.duration));
    };

    Notify.prototype.hideInternal = function(i) {
      iconArray.splice(i, 1);
      contentArray.splice(i, 1);
      dataArray.splice(i, 1);
      clearTimeout(timerArray[i]);
      timerArray.splice(i, 1);
      return m.redraw();
    };

    Notify.prototype.view = function() {
      var content, context, i, key;
      return m('.Notify', (function() {
        var j, len, ref, results;
        results = [];
        for (i = j = 0, len = contentArray.length; j < len; i = ++j) {
          ref = contentArray[i], key = ref.key, content = ref.content, context = ref.context;
          if (context === this) {
            results.push(m('.NotifyItem', {
              key: key,
              'data-index': i,
              'data-data': JSON.stringify(dataArray[i]),
              onclick: this.onClickInternal,
              style: {
                right: '1em',
                top: (1 + 5 * i) + 'em'
              }
            }, m('.Icon', iconArray[i]), m('.Content', content)));
          }
        }
        return results;
      }).call(this));
    };

    return Notify;

  })();

  Notify.mss = {
    Notify: {
      NotifyItem: {
        width: '20em',
        height: '4em',
        position: 'fixed',
        right: '1em',
        background: '#fff',
        border: '1px solid ' + {}.border,
        zIndex: 9999,
        borderRadius: '0.4em',
        transition: 'top 0.1s ease',
        Content: {
          width: '16em',
          textAlign: 'center',
          display: 'inline-block',
          verticalAlign: 'middle'
        },
        Icon_CloseBtn: {
          width: '4em',
          textAlign: 'center',
          display: 'inline-block',
          svg: s.LineSize('4em', '1em')({
            verticalAlign: 'middle'
          })
        }
      }
    }
  };

  module.exports = Notify;

}).call(this);
