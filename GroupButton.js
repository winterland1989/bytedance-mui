// Generated by CoffeeScript 1.12.7
(function() {
  var BUTTON_HEIGHT_MAP, BUTTON_WIDTH_MAP, FONTSIZE_MAP, GroupButton, m, ref, s, u,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  m = require('mithril');

  s = require('mss-js');

  u = require('./utils');

  ref = require('./CONSTANT'), BUTTON_WIDTH_MAP = ref.BUTTON_WIDTH_MAP, BUTTON_HEIGHT_MAP = ref.BUTTON_HEIGHT_MAP, FONTSIZE_MAP = ref.FONTSIZE_MAP;

  GroupButton = (function() {
    function GroupButton(arg) {
      var i, ref1, ref2, ref3, ref4, ref5, ref6;
      this.textArray = arg.textArray, this.stateArray = (ref1 = arg.stateArray) != null ? ref1 : (function() {
        var k, len, ref2, results;
        ref2 = this.textArray;
        results = [];
        for (k = 0, len = ref2.length; k < len; k++) {
          i = ref2[k];
          results.push(false);
        }
        return results;
      }).call(this), this.disabledArray = (ref2 = arg.disabledArray) != null ? ref2 : (function() {
        var k, len, ref3, results;
        ref3 = this.textArray;
        results = [];
        for (k = 0, len = ref3.length; k < len; k++) {
          i = ref3[k];
          results.push(false);
        }
        return results;
      }).call(this), this.multi = (ref3 = arg.multi) != null ? ref3 : true, this.size = (ref4 = arg.size) != null ? ref4 : 'M', this.onSelect = (ref5 = arg.onSelect) != null ? ref5 : u.noOp, this.onUnselect = (ref6 = arg.onUnselect) != null ? ref6 : u.noOp;
      this.onClickInternal = bind(this.onClickInternal, this);
    }

    GroupButton.prototype.onClickInternal = function(e) {
      var i, j, k, len, ref1;
      i = parseInt(u.getCurrentTargetData(e, 'index'));
      if (this.disabledArray[i]) {
        return;
      }
      if (!this.multi) {
        ref1 = this.stateArray;
        for (j = k = 0, len = ref1.length; k < len; j = ++k) {
          s = ref1[j];
          if (s) {
            if (i !== j) {
              this.onUnselect(j);
              this.stateArray[j] = false;
            }
          }
        }
      }
      if (this.stateArray[i] === false) {
        this.stateArray[i] = true;
        return this.onSelect(i);
      } else {
        this.stateArray[i] = false;
        return this.onUnselect(i);
      }
    };

    GroupButton.prototype.view = function() {
      var disabled, i, state, t;
      return m('ul.GroupButton', {
        style: {
          height: BUTTON_HEIGHT_MAP[this.size],
          lineHeight: BUTTON_HEIGHT_MAP[this.size],
          fontSize: FONTSIZE_MAP[this.size]
        }
      }, (function() {
        var k, len, ref1, results;
        ref1 = this.textArray;
        results = [];
        for (i = k = 0, len = ref1.length; k < len; i = ++k) {
          t = ref1[i];
          state = this.stateArray[i];
          disabled = this.disabledArray[i];
          results.push(m('li.ButtonItem', {
            'data-index': i,
            className: [(this.multi ? 'Multi' : ''), (state ? 'Selected' : ''), (disabled ? 'Disabled' : '')].join(' '),
            onclick: this.onClickInternal
          }, t));
        }
        return results;
      }).call(this));
    };

    return GroupButton;

  })();

  GroupButton.mss = {
    GroupButton: {
      margin: 0,
      padding: 0,
      listStyle: 'none',
      ButtonItem: {
        userSelect: 'none',
        position: 'relative',
        display: 'inline-block',
        boxSizing: 'border-box',
        minWidth: '100px',
        verticalAlign: 'middle',
        padding: '0 16px',
        margin: '0 -1px 0 0',
        border: '1px solid #DADFE3',
        textAlign: 'center',
        color: '#333',
        background: '#FFF',
        cursor: 'pointer',
        zIndex: 1,
        $hover_$pressed: {
          borderColor: '#2F88FF',
          color: '#2F88FF'
        },
        $pressed: {
          outline: 'none',
          background: '#F0F9FF'
        },
        $after: {
          position: 'absolute',
          top: '2px',
          right: '2px',
          width: 0,
          height: 0,
          borderTop: '3.5px solid #DADFE3',
          borderRight: '3.5px solid #DADFE3',
          borderBottom: '3.5px solid #00000000',
          borderLeft: '3.5px solid #00000000'
        }
      },
      '.ButtonItem:first-child': {
        borderRadius: '4px 0 0 4px'
      },
      '.ButtonItem:last-child': {
        borderRadius: '0 4px 4px 0'
      },
      Multi: {
        $after: {
          content: '""'
        }
      },
      Selected: {
        borderColor: '#1C68D9',
        color: '#1C68D9',
        zIndex: 3,
        background: '#F0F9FF',
        $after: {
          borderTop: '3.5px solid #2F88FF',
          borderRight: '3.5px solid #2F88FF',
          borderBottom: '3.5px solid #F0F9FF',
          borderLeft: '3.5px solid #F0F9FF'
        }
      },
      Disabled: {
        borderColor: '#EDF1F5',
        background: '#FCFCFC',
        cursor: 'not-allowed',
        color: '#D6D6D6',
        zIndex: 0
      },
      'Selected.Disabled': {
        borderColor: '#A8D7FF',
        background: '#F0F9FF',
        cursor: 'not-allowed',
        color: '#A8D7FF',
        zIndex: 2,
        $after: {
          borderTop: '3.5px solid #A8D7FF',
          borderRight: '3.5px solid #A8D7FF',
          borderBottom: '3.5px solid #F0F9FF',
          borderLeft: '3.5px solid #F0F9FF'
        }
      }
    }
  };

  module.exports = GroupButton;

}).call(this);
