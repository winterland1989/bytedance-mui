// Generated by CoffeeScript 1.12.7
(function() {
  var Table, m, s, u,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  m = require('mithril');

  s = require('mss-js');

  u = require('./utils');


  /*
  columns :: [columnObject]
  
  columnObject ::
      key: Int | String
      title :: String | mithril view
      textAlign: 'left' | 'center' | 'right' (default = 'left')
      emptyPlaceHolder: String, '-', ...     (default = '')
      minWidth:  'xxPx'                      (default = 'auto')
      width: 'xxPx'                          (default = 'auto')
      sort: (key, order :: 'ASC' | 'DESC') -> , works on data property   (default = null)
      sorting :: '' | 'ASC' | 'DESC' (default = '')
      fixed :: '' | 'LEFT' | 'RIGHT'
  
  data :: [{key1 :: value1, key2 :: value2 ...}]
  
  value :: String | mithril view
  
  totalWidth :: String (default = '100%')
  border :: 'HORIZONTAL' | 'ALL' (default = 'ALL')
  striped :: Boolean (default = true)
   */

  Table = (function() {
    function Table(arg) {
      var ref, ref1, ref2, ref3, ref4;
      this.columns = arg.columns, this.data = arg.data, this.mainWidth = (ref = arg.mainWidth) != null ? ref : '100%', this.mainScrollWidth = (ref1 = arg.mainScrollWidth) != null ? ref1 : '100%', this.innerShadow = (ref2 = arg.innerShadow) != null ? ref2 : 'NONE', this.borderType = (ref3 = arg.borderType) != null ? ref3 : 'ALL', this.striped = (ref4 = arg.striped) != null ? ref4 : true;
      this.sort = bind(this.sort, this);
      this.initColumns = bind(this.initColumns, this);
      this.initColumns();
    }

    Table.prototype.initColumns = function() {
      var c, j, len, ref, results;
      this.leftColumns = [];
      this.mainColumns = [];
      this.rightColumns = [];
      ref = this.columns;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        if (c.fixed === 'LEFT') {
          results.push(this.leftColumns.push(c));
        } else if (c.fixed === 'RIGHT') {
          results.push(this.rightColumns.push(c));
        } else {
          results.push(this.mainColumns.push(c));
        }
      }
      return results;
    };

    Table.prototype.sort = function() {};

    Table.prototype.view = function() {
      return m('.TableView', {
        style: {
          width: this.totalWidth
        }
      }, this.leftColumns.length ? m('.LeftTable', m('table.LeftTable', this.tableBody(this.leftColumns))) : void 0, m('.MainTable', {
        style: {
          width: this.mainScrollWidth
        }
      }, m('table', {
        style: {
          width: this.mainWidth
        }
      }, this.tableBody(this.mainColumns))), this.rightColumns.length ? m('.RightTable', m('table.RightTable', this.tableBody(this.rightColumns))) : void 0);
    };

    Table.prototype.tableBody = function(columns) {
      var c, d, i;
      return [
        m('thead', m('tr', (function() {
          var j, len, results;
          results = [];
          for (j = 0, len = columns.length; j < len; j++) {
            c = columns[j];
            results.push(m('th', {
              style: {
                borderWidth: this.borderType === 'HORIZONTAL' ? '1px 0' : '1px',
                width: c.width ? c.width : 'auto',
                minWidth: c.minWidth ? c.minWidth : 'auto'
              }
            }, m('span', c.title), c.sort ? m('.Sorting') : void 0));
          }
          return results;
        }).call(this))), m('tbody', (function() {
          var j, len, ref, results;
          ref = this.data;
          results = [];
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            d = ref[i];
            results.push(m('tr', {
              key: i,
              style: {
                background: (i % 2 === 1) && this.striped ? '#F8F9FA' : '#FFF'
              }
            }, (function() {
              var k, len1, results1;
              results1 = [];
              for (k = 0, len1 = columns.length; k < len1; k++) {
                c = columns[k];
                results1.push(m('td', {
                  style: {
                    borderWidth: this.borderType === 'HORIZONTAL' ? '1px 0' : '1px'
                  }
                }, d[c.key] ? d[c.key] : c.emptyPlaceHolder));
              }
              return results1;
            }).call(this)));
          }
          return results;
        }).call(this))
      ];
    };

    return Table;

  })();

  Table.mss = {
    TableView: {
      position: 'relative',
      LeftTable: {
        position: 'relative',
        boxShadow: '6px 0 6px -6px #00000014',
        marginRight: '-1px',
        zIndex: 3
      },
      RightTable: {
        position: 'relative',
        boxShadow: '-6px 0 6px -6px #00000014',
        marginLeft: '-1px',
        zIndex: 3
      },
      MainTable: {
        position: 'relative',
        overflowX: 'auto'
      },
      LeftTable_MainTable_RightTable: {
        display: 'inline-block',
        table: {
          overflow: 'auto',
          borderCollapse: 'collapse',
          th_td: {
            borderStyle: 'solid',
            borderColor: '#DADFE3',
            textAlign: 'center',
            color: '#333',
            lineHeight: '22px'
          },
          th: {
            background: '#F8F9FA',
            verticalAlign: 'middle',
            fontWeight: '500',
            height: '48px'
          },
          td: {
            padding: '10px 16px'
          }
        }
      }
    }
  };

  module.exports = Table;

}).call(this);
