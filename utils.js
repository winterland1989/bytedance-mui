// Generated by CoffeeScript 1.12.7
(function() {
  var cancelBubble, clearDateHMS, debounce, firstErrorInArray, formatDate, formatDateWithHMS, formatHMS, formatXX, getCurrentTargetData, getTarget, getTargetData, m, parseDateWithHMS, removeFromArray, spinner, svg, svgCounter, targetHasClass;

  m = require('mithril');

  getTarget = function(event) {
    var elem;
    return elem = event.target || event.srcElement;
  };

  getTargetData = function(event, dataStr) {
    var elem;
    elem = event.target || event.srcElement;
    if (elem.dataset != null) {
      return elem.dataset[dataStr];
    } else {
      return elem.getAttribute('data-' + dataStr);
    }
  };

  getCurrentTargetData = function(event, dataStr) {
    var elem;
    elem = event.currentTarget;
    if (elem.dataset != null) {
      return elem.dataset[dataStr];
    } else {
      return elem.getAttribute('data-' + dataStr);
    }
  };

  targetHasClass = function(elem, str) {
    return (elem.className.indexOf(str)) !== -1;
  };

  cancelBubble = function(e) {
    if (e.cancelBubble === false) {
      e.cancelBubble = true;
    }
    if (typeof e.stopPropagation === "function") {
      e.stopPropagation();
    }
    return false;
  };

  clearDateHMS = function(date) {
    date.setHours(0);
    date.setMinutes(0);
    date.setSeconds(0);
    date.setMilliseconds(0);
    return date;
  };

  formatDate = function(date) {
    var dd, mm, yyyy;
    yyyy = date.getFullYear();
    mm = date.getMonth() + 1;
    dd = date.getDate();
    return yyyy + '-' + (formatXX(mm)) + '-' + (formatXX(dd));
  };

  formatHMS = function(date) {
    var hh, mm, ss;
    hh = date.getHours();
    mm = date.getMinutes();
    ss = date.getSeconds();
    return (formatXX(hh)) + ':' + (formatXX(mm)) + ':' + (formatXX(ss));
  };

  formatDateWithHMS = function(date) {
    var hh, mm, ss;
    hh = date.getHours();
    mm = date.getMinutes();
    ss = date.getSeconds();
    return (formatDate(date)) + ' ' + (formatHMS(date));
  };

  parseDateWithHMS = function(dateString) {
    var date, dateStr, hh, mm, ref, ref1, ss, timeStr;
    ref = dateString.split(' '), dateStr = ref[0], timeStr = ref[1];
    date = new Date(dateStr);
    if (timeStr != null) {
      ref1 = timeStr.split(':'), hh = ref1[0], mm = ref1[1], ss = ref1[2];
      date.setHours(parseInt(hh));
      date.setMinutes(parseInt(mm));
      date.setSeconds(parseInt(ss));
    }
    return date;
  };

  formatXX = function(x) {
    if (x < 10) {
      return '0' + x.toString();
    } else {
      return x.toString();
    }
  };

  firstErrorInArray = function(arr) {
    var j, len, x;
    for (j = 0, len = arr.length; j < len; j++) {
      x = arr[j];
      if (x instanceof Error) {
        return x;
      }
    }
  };

  removeFromArray = function(arr, x) {
    var i;
    i = arr.indexOf(x);
    if (i !== -1) {
      arr.splice(i, 1);
    }
    return i;
  };

  svgCounter = 0;

  svg = function(svg) {
    return m('i', {
      key: svgCounter++
    }, svg);
  };

  spinner = function(color, size, interval) {
    if (size == null) {
      size = '2em';
    }
    if (interval == null) {
      interval = '1s';
    }
    return svg(m.trust("<svg version=\"1.1\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    x=\"0px\"\n    y=\"0px\"\n    width=\"" + size + "\"\n    viewBox=\"0 0 80 80\"\n    xml:space=\"preserve\">\n    <path\n        fill=\"" + color + "\"\n        d=\"M40,72C22.4,72,8,57.6,8,40C8,22.4,\n        22.4,8,40,8c17.6,0,32,14.4,32,32c0,1.1-0.9,2-2,2\n        s-2-0.9-2-2c0-15.4-12.6-28-28-28S12,24.6,12,40s12.6,\n        28,28,28c1.1,0,2,0.9,2,2S41.1,72,40,72z\"\n        <!-- ANIMATION START -->\n        <animateTransform\n            attributeType=\"xml\"\n            attributeName=\"transform\"\n            type=\"rotate\"\n            from=\"0 40 40\"\n            to=\"360 40 40\"\n            dur=\"" + interval + "\"\n            repeatCount=\"indefinite\"\n        />\n    </path>\n</svg>"));
  };

  debounce = function(fn, delay, leading) {
    var args, pending;
    if (leading == null) {
      leading = false;
    }
    pending = false;
    if (leading) {
      return function() {
        if (!pending) {
          fn.apply(this, arguments);
          pending = true;
          return setTimeout((function() {
            return pending = false;
          }), delay);
        }
      };
    } else {
      args = void 0;
      return function() {
        var self;
        args = arguments;
        self = this;
        if (!pending) {
          pending = true;
          return setTimeout(function() {
            pending = false;
            return fn.apply(self, args);
          }, delay);
        }
      };
    }
  };

  module.exports = {
    getTarget: getTarget,
    getTargetData: getTargetData,
    getCurrentTargetData: getCurrentTargetData,
    targetHasClass: targetHasClass,
    cancelBubble: cancelBubble,
    clearDateHMS: clearDateHMS,
    formatXX: formatXX,
    formatDate: formatDate,
    formatHMS: formatHMS,
    formatDateWithHMS: formatDateWithHMS,
    parseDateWithHMS: parseDateWithHMS,
    firstErrorInArray: firstErrorInArray,
    removeFromArray: removeFromArray,
    noOp: (function() {}),
    svg: svg,
    spinner: spinner,
    debounce: debounce
  };

}).call(this);
